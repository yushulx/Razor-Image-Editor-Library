@page "/"

@inject IJSRuntime JSRuntime
@using RazorImageEditorLibrary
@using RazorCameraLibrary
@using Camera = RazorCameraLibrary.Camera

<PageTitle>Index</PageTitle>


<div id="loading-indicator" class="loading-indicator" style="@(isLoading ? "display: flex;" : "display: none;")">
    <div class="spinner"></div>
</div>

<div id="imageGrid" style="display: grid; grid-template-columns: repeat(2, 1fr); grid-template-rows: repeat(2, 600px);gap: 5px;">
    <div class="container">
        <h1>Image Editor</h1>
        <div class="row">
            <label>Get a License key from <a href="https://www.dynamsoft.com/customer/license/trialLicense?product=ddv"
                                          target="_blank">here</a>
            </label>
            <div class="filler"></div>
            <input type="text" placeholder="@licenseKey" @bind="licenseKey">
            <button @onclick="Activate">Activate SDK</button>
        
        </div>

        <div style="margin: 10px 0;">
            <b>File source: </b>
            <input type="file" @ref="inputFile" accept="application/pdf,image/png,image/jpeg,image/tiff" @onchange="LoadFile" multiple />
            <button @onclick="Toggle">@buttonText</button>
        </div>

        <div style="margin: 10px 0;">
            <b>Camera source: </b>
            <button @onclick="GetCameras">Get Cameras</button>
            <select id="camerasources" @onchange="e => OnCameraChange(e)">
                @foreach (var camera in cameras)
                {
                    <option value="@camera.DeviceId">@camera.Label</option>
                }
            </select>
            <button @onclick="Capture">Capture</button>
        </div>

        <div style="margin: 10px 0;">
            <b>File operations:</b>
            <button @onclick="SelectAll">Select All</button>
            <button @onclick="UnselectAll">Unselect All</button>
            <button @onclick="RemoveSelected">Remove Selected</button>
            <button @onclick="RemoveAll">Remove All</button>
        </div>

        <div style="margin: 10px 0;">
            <b>File format conversion:</b>
            <select id="sources" @onchange="e => OnChange(e)">
                @foreach (var format in formats)
                {
                    <option value="@format">@format</option>
                }
            </select>
            <input type="checkbox" @bind="isZip" style="margin: 0 2px;" />Zip
            <button @onclick="ConvertImage">Convert</button>
        </div>
    
    </div>

    <div class="container">
        
        <div id="videoview">
            <div id="videoContainer"></div>
        </div>
    </div>
    
    <div class="container">
        <div class="document-viewer">
            <div id="browse-viewer"></div>
        </div>
    </div>

    <div class="container" style="@(showEditor ? "display: block;" : "display: none;")">
        <div class="document-viewer">
            <div id="edit-viewer"></div>
        </div>
    </div>
</div>


@code {
    private string licenseKey =
    "DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==";
    private bool isLoading = false;
    private ImageEditorJsInterop? imageEditorJsInterop;
    private DocumentManager? documentManager;
    private string[] formats = new string[] { FileFormat.PDF, FileFormat.TIFF, FileFormat.JPEG, FileFormat.PNG };
    private string selectedValue = FileFormat.PDF;
    private ElementReference inputFile;
    private bool isZip = false;
    private bool showEditor = true;
    private string buttonText = "Hide Editor";
    private bool isReady = false;

    private List<Camera> cameras = new List<Camera>();
    private CameraJsInterop? cameraJsInterop;
    private CameraEnhancer? cameraEnhancer;
    private string selectedCamera = string.Empty;

    public async Task Activate()
    {
        if (imageEditorJsInterop == null) return;
        isLoading = true;
        int ret = await imageEditorJsInterop.SetLicense(licenseKey);
        if (ret == 0)
        {
            documentManager = await imageEditorJsInterop.CreateDocumentManager();
            await documentManager.LoadPdfWasm();
            await documentManager.CreateBrowseViewer("browse-viewer");
            await documentManager.CreateEditViewer("edit-viewer");
            isReady = true;
        }
        
        isLoading = false;
    }

    private async Task OnCameraChange(ChangeEventArgs e)
    {
        if (cameraEnhancer != null)
        {
            await cameraEnhancer.CloseCamera();

            selectedCamera = e.Value.ToString();

            await OpenCamera();
        }
    }

    private async Task OnChange(ChangeEventArgs e)
    {
        selectedValue = e.Value.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        imageEditorJsInterop = new ImageEditorJsInterop(JSRuntime);
        await imageEditorJsInterop.LoadJS();

        cameraJsInterop = new CameraJsInterop(JSRuntime);
        await cameraJsInterop.LoadJS();

        cameraEnhancer = await cameraJsInterop.CreateCameraEnhancer();
        await cameraEnhancer.SetVideoElement("videoContainer");
    }

    public async Task LoadFile()
    {
        if (documentManager == null) return;
        await documentManager.LoadFile(inputFile);
    }

    public async Task ConvertImage()
    {
        if (documentManager == null) return;
        isLoading = true;
        await documentManager.Convert("convert", selectedValue, isZip);
        isLoading = false;
    }

    public void Toggle()
    {
        if (documentManager == null) return;

        if (showEditor)
        {
            showEditor = false;
            buttonText = "Show Editor";
        }
        else
        {
            buttonText = "Hide Editor";
            showEditor = true;
        }
    }

    public async Task SelectAll()
    {
        if (documentManager == null) return;
        await documentManager.SelectAll();
    }

    public async Task UnselectAll()
    {
        if (documentManager == null) return;
        await documentManager.UnselectAll();
    }

    public async Task RemoveSelected()
    {
        if (documentManager == null) return;
        await documentManager.RemoveSelected();
    }

    public async Task RemoveAll()
    {
        if (documentManager == null) return;
        await documentManager.RemoveAll();
    }

    public async Task GetCameras()
    {
        if (cameraEnhancer == null) return;
        try
        {
            cameras = await cameraEnhancer.GetCameras();
            if (cameras.Count >= 0)
            {
                selectedCamera = cameras[0].DeviceId;
                await OpenCamera();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task OpenCamera()
    {
        if (cameraEnhancer == null) return;
        try
        {
            int selectedIndex = cameras.FindIndex(camera => camera.DeviceId == selectedCamera);
            await cameraEnhancer.SetResolution(640, 480);
            await cameraEnhancer.OpenCamera(cameras[selectedIndex]);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task Capture()
    {
        if (cameraEnhancer == null || documentManager == null) return;

        try
        {
            IJSObjectReference canvas = await cameraEnhancer.AcquireCameraFrame();
            await documentManager.LoadCanvas(canvas);   
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}